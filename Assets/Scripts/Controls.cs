//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""CamMovement"",
            ""id"": ""40df497d-1197-4e0d-9122-dd198835cb7e"",
            ""actions"": [
                {
                    ""name"": ""MouseClick"",
                    ""type"": ""Button"",
                    ""id"": ""0bc2a390-2be1-40b9-b20c-eba38f3ce182"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseDelta"",
                    ""type"": ""Value"",
                    ""id"": ""88893d6d-09ea-4105-892a-056f42999717"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseScroll"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c5e2b7e3-936e-479c-a18c-eb9ed1d23c59"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PanActive"",
                    ""type"": ""Button"",
                    ""id"": ""175c5575-7b18-403e-98d0-f1c0ea70567c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5928fb8c-f4e2-4c82-826c-c73a812a3af1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7ef2ea2-1ba3-464d-9b4e-5487311b12e0"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2b9cb67-c2c6-4d8c-84a7-856fff393a44"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""855c77bb-ad34-4613-ab67-4bca78a68cfa"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72e9dfb4-8202-4582-a214-50363bade1dd"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PanActive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af81daae-9a61-496c-8dfb-20b19ca5bb85"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PanActive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Cam"",
            ""bindingGroup"": ""Cam"",
            ""devices"": []
        }
    ]
}");
        // CamMovement
        m_CamMovement = asset.FindActionMap("CamMovement", throwIfNotFound: true);
        m_CamMovement_MouseClick = m_CamMovement.FindAction("MouseClick", throwIfNotFound: true);
        m_CamMovement_MouseDelta = m_CamMovement.FindAction("MouseDelta", throwIfNotFound: true);
        m_CamMovement_MouseScroll = m_CamMovement.FindAction("MouseScroll", throwIfNotFound: true);
        m_CamMovement_PanActive = m_CamMovement.FindAction("PanActive", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CamMovement
    private readonly InputActionMap m_CamMovement;
    private ICamMovementActions m_CamMovementActionsCallbackInterface;
    private readonly InputAction m_CamMovement_MouseClick;
    private readonly InputAction m_CamMovement_MouseDelta;
    private readonly InputAction m_CamMovement_MouseScroll;
    private readonly InputAction m_CamMovement_PanActive;
    public struct CamMovementActions
    {
        private @Controls m_Wrapper;
        public CamMovementActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseClick => m_Wrapper.m_CamMovement_MouseClick;
        public InputAction @MouseDelta => m_Wrapper.m_CamMovement_MouseDelta;
        public InputAction @MouseScroll => m_Wrapper.m_CamMovement_MouseScroll;
        public InputAction @PanActive => m_Wrapper.m_CamMovement_PanActive;
        public InputActionMap Get() { return m_Wrapper.m_CamMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CamMovementActions set) { return set.Get(); }
        public void SetCallbacks(ICamMovementActions instance)
        {
            if (m_Wrapper.m_CamMovementActionsCallbackInterface != null)
            {
                @MouseClick.started -= m_Wrapper.m_CamMovementActionsCallbackInterface.OnMouseClick;
                @MouseClick.performed -= m_Wrapper.m_CamMovementActionsCallbackInterface.OnMouseClick;
                @MouseClick.canceled -= m_Wrapper.m_CamMovementActionsCallbackInterface.OnMouseClick;
                @MouseDelta.started -= m_Wrapper.m_CamMovementActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.performed -= m_Wrapper.m_CamMovementActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.canceled -= m_Wrapper.m_CamMovementActionsCallbackInterface.OnMouseDelta;
                @MouseScroll.started -= m_Wrapper.m_CamMovementActionsCallbackInterface.OnMouseScroll;
                @MouseScroll.performed -= m_Wrapper.m_CamMovementActionsCallbackInterface.OnMouseScroll;
                @MouseScroll.canceled -= m_Wrapper.m_CamMovementActionsCallbackInterface.OnMouseScroll;
                @PanActive.started -= m_Wrapper.m_CamMovementActionsCallbackInterface.OnPanActive;
                @PanActive.performed -= m_Wrapper.m_CamMovementActionsCallbackInterface.OnPanActive;
                @PanActive.canceled -= m_Wrapper.m_CamMovementActionsCallbackInterface.OnPanActive;
            }
            m_Wrapper.m_CamMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseClick.started += instance.OnMouseClick;
                @MouseClick.performed += instance.OnMouseClick;
                @MouseClick.canceled += instance.OnMouseClick;
                @MouseDelta.started += instance.OnMouseDelta;
                @MouseDelta.performed += instance.OnMouseDelta;
                @MouseDelta.canceled += instance.OnMouseDelta;
                @MouseScroll.started += instance.OnMouseScroll;
                @MouseScroll.performed += instance.OnMouseScroll;
                @MouseScroll.canceled += instance.OnMouseScroll;
                @PanActive.started += instance.OnPanActive;
                @PanActive.performed += instance.OnPanActive;
                @PanActive.canceled += instance.OnPanActive;
            }
        }
    }
    public CamMovementActions @CamMovement => new CamMovementActions(this);
    private int m_CamSchemeIndex = -1;
    public InputControlScheme CamScheme
    {
        get
        {
            if (m_CamSchemeIndex == -1) m_CamSchemeIndex = asset.FindControlSchemeIndex("Cam");
            return asset.controlSchemes[m_CamSchemeIndex];
        }
    }
    public interface ICamMovementActions
    {
        void OnMouseClick(InputAction.CallbackContext context);
        void OnMouseDelta(InputAction.CallbackContext context);
        void OnMouseScroll(InputAction.CallbackContext context);
        void OnPanActive(InputAction.CallbackContext context);
    }
}
